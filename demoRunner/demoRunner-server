#!/usr/bin/env node

var http = require("http"),
    url = require("url"),
    path = require("path"),
    fs = require("fs"),
    port = process.argv[2] || 8888;

function usage() {
    var prog = path.basename(__filename);
    console.log(
"   Usage: " + prog + " DOC_ROOT\n" +
"\n" +
"  Run a " + prog + " HTTP server using DOC_ROOT as the path\n" +
"  to the top document directory.\n"
    );
    process.exit(1);
}

var docRoot;
var cwdOrg = process.cwd();

for(var i=2; i < process.argv.length; ++i) {
    var str = process.argv[i];
    switch(str) {
        case '-h':
        case '--h':
        case '-help':
        case '--help':
            usage();
            break;
        default:
            fs.access(str, fs.X_OK | fs.R_OK,  err => {
                if (!err) {
                    console.log('Cannot access file ' + str + "\n\n");
                    usage();
                }
            });

            try {
                process.chdir(str);
            }
            catch(err) {
                console.log('Cannot cd to ' + str + "\n\n");
                usage();
            }
            break;
    }
};

console.log("Exiting\n");
process.exit(1);


// Started with: https://gist.github.com/ryanflorence/701407


http.createServer(function(request, response)
{

  var uri = url.parse(request.url).pathname
    , filename = path.join(process.cwd(), uri);

  var contentTypesByExtension = {
    '.html': "text/html",
    '.css':  "text/css",
    '.js':   "text/javascript"
  };

  fs.exists(filename, function(exists) {
    if(!exists) {
      response.writeHead(404, {"Content-Type": "text/plain"});
      response.write("404 Not Found\n");
      response.end();
      return;
    }

    if (fs.statSync(filename).isDirectory()) filename += '/index.html';

    fs.readFile(filename, "binary", function(err, file) {
      if(err) {        
        response.writeHead(500, {"Content-Type": "text/plain"});
        response.write(err + "\n");
        response.end();
        return;
      }

      var headers = {};
      var contentType = contentTypesByExtension[path.extname(filename)];
      if (contentType) headers["Content-Type"] = contentType;
      response.writeHead(200, headers);
      response.write(file, "binary");
      response.end();
    });
  });
}).listen(parseInt(port, 10));

console.log("Static file server running at\n  => http://localhost:" + port + "/\nCTRL + C to shutdown");

