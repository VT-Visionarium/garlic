#!/bin/bash

#################################################
#         CONFIGURATION
#################################################

# directory that has demos with run.bash files
demoRoot=/NTFS/Shared/demos


#################################################

# by default mono is unset.
mono=
runUsage=
topPrograms=

function usage()
{
    cat << EOF

    Usage: $0 [-m|--mono] 

  Run a launcher GUI with buttons that run hyperCube programs.  This
  does not control the programs that it runs, which is a better case if
  you need to control what you are doing.  You may need to wait for some
  programs to finish running before starting other programs.  With great
  power comes responsibility.  This program has no smarts to determine
  then running a particlular program can be successful.  You must be
  knowledgeable about the program interdependency.  If you need a higher
  level demo runner interface try running hy_demoRunner (under
  development).

  This program looks in "$demoRoot" for files named
  run.bash in addition to the programs:

$topPrograms

EOF

    exit 1
}

dir=.
who=$(whoami)
tmpfile="$(mktemp --suffix=_${who}_hy_demo)"

while [ -n "$1" ] ; do
    case $1 in
        -m|--m|-mono|--mono)
            mono=" --mono"
            ;;
        *)
            runUsage=yes
            ;;
    esac
    shift 1
done


topPrograms="hy_start${mono}
hy_stop
dtk-server is900
hy_projectors_on${mono}
hy_projectors_off${mono}
hy_kill_dtk-server
hy_edgeBlend_on
hy_frameLock_on
hy_startx
hy_stopx
hy_syncToVBlank_on
hy_testGrid_off
hy_testGrid_on
"


[ -n "$runUsage" ] && usage


function getRunList()
{
    prev=
    for i in * ; do
        if [ "$i" = "*" ] ; then
            continue
        elif [ -x run.bash ] ; then
            # bash sucks at recursion.  It does not
            # make new variables for each recurse, even for
            # local variables.
            next="xfce4-terminal  -x $dir/run.bash${mono}"
            if [ "$next" != "$prev" ] ; then
                echo "$next" >> $tmpfile
                prev="$next"
            fi
        elif [ -d "$i" ] ; then
            # we want shorter relative paths in dir
            dir=$dir/$i
            cd $i || exit $?
            getRunList
            cd .. || exit $?
            dir="$(dirname $dir)"
        fi
    done
}

echo "${topPrograms}" > $tmpfile

cd $demoRoot || exit $?
getRunList
#cat $tmpfile
cd $demoRoot || exit $?
qs_demo_launcher --list $tmpfile --title "Debugging HyperCube Demos"
rm $tmpfile

