#!/usr/bin/env ruby

require 'find'

#################################################
#         CONFIGURATION
#################################################

# directory that has demos with run.bash files
$demoRoot = '/NTFS/Shared/demos'

# demos to run are named:
$runDemoName = 'run.bash'


#################################################

# env overrides.  At least to test this.
$demoRoot = ENV['DEMO_ROOT'] if ENV['DEMO_ROOT']
$runDemoName = ENV['RUN_DEMO_NAME'] if ENV['RUN_DEMO_NAME']


# by default mono is unset.
$mono = ''
$runUsage = false
$programs = ''

def usage()

    print <<-EOF

    Usage: #{$0} [-m|--mono]

  Run a launcher GUI with buttons that run hyperCube programs.  This
  does not control the programs that it runs, which is a better case if
  you need to control what you are doing.  You may need to wait for some
  programs to finish running before starting other programs.  With great
  power comes responsibility.  This program has no smarts to determine
  then running a particlular program can be successful.  You must be
  knowledgeable about the program interdependency.  If you need a higher
  level demo runner interface try running hy_demoRunner (under
  development).

  This program looks in "#{$demoRoot}" for files named
  #{$runDemoName} in addition to the programs:

#{$programs}

EOF

    exit 1
end



ARGV.each do |arg|
    case arg
        when '-m','--m','-mono','--mono'
            then $mono = ' --mono'
        else
            $runUsage = true
    end
end



$programs = "hy_start#{$mono}
hy_stop
dtk-server is900
hy_projectors_on#{$mono}
hy_projectors_off#{$mono}
hy_kill_dtk-server
hy_edgeBlend_on
hy_frameLock_on
hy_startx
hy_stopx
hy_syncToVBlank_on
hy_testGrid_off
hy_testGrid_on
"

usage if $runUsage


def getRunList()

    Find.find('.') do |path|
        path.gsub!(/^\.\//, '')
        $programs += 'xfce4-terminal -x ' +
            path + $mono + "\n" if File.basename(path) == $runDemoName
    end
end

Dir.chdir $demoRoot

getRunList

$cmd = '__GL_YIELD=USLEEP qs_demo_launcher --list - --title "Debugging HyperCube Demos"'

io = IO.popen($cmd, 'w')
io.write $programs
# close will wait for the child to exit
io.close

puts $0 + ' exiting'
