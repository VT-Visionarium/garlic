#!/bin/bash

function usage()
{
    cat <<EOF

  Usage: $0 [-m|--mono]|[-s|--stereo]|[-h|--help]

  Run many programs needed to start a HyperCube session.

  Runs the following 6 programs:

    hy_stopx                   makes sure no user X sessions are running
    hy_kill_dtk-server         kill any dtk-server
    hy_projectors_on [--mono]  turn on projects
    hy_startx                  start a user login X session
    hy_edgeBlend_on            fade the edges of overlapping root windows
    hy_frameLock_on            turn on nvidia frame locking (BROKEN??)
    hy_syncToVBlank_on         turn on nvidia sync to verticle refresh

  By default we turn on the projector for stereo display, not --mono.
  This program does not start dtk-server, given that you, in general,
  do not want it running and it may even conflict with what you may
  want to do.

EOF

    exit 1
}

function Run()
{
    echo "$*"
    if ! $* ; then
        echo
        echo "$* FAILED"
        exit 1
    fi
}


# default mono is off
mono=


while [ -n "$1" ] ; do
    case $1 in
        -h|--h*)
            usage
            ;;
        -m|-mono|--m|--mono)
            mono="--mono"
            ;;
        -s|-stereo|--s|--stereo)
            mono=
            ;;
        *)
            usage
            ;;
    esac
    shift 1
done

# first kill any old user X sessions
Run hy_stopx
# then kill any old DTK servers
Run hy_kill_dtk-server




# TODO: need an error check here
Run hy_projectors_on $mono

Run hy_startx
displaySave="$DISPLAY"

# We check that we are running xfce4-session and we can connect
# to the X server and then check that xfce4-session is
# still running.  This is not fool proof, but it's not
# likely that these 3 checks pass and things are not okay
# with running the XFCE X11 session.

# wait for xfce4-session to be running
count=0
sleep 0.5
while ! killall -CONT xfce4-session ; do
	sleep 1
	let count=$count+1
    if [ $count = 40 ] ; then
        cat <<EOF
 Failed ($count seconds) to find xfce4-session

EOF
	exit 1
    fi
done

# test that a particular X server is running
# startx may have failed or not finished starting yet
# so we test it here with xset
display=":0.15"
export DISPLAY=$display

count=0
while ! xset -q > /dev/null ; do
    echo "Failed ($count seconds) to run a good X session yet."
    let count=$count+1
    if [ $count = 40 ] ; then
        cat <<EOF
 Failed ($count seconds) $count tries to connect to X server at DISPLAY=$DISPLAY

EOF
        exit 1
    fi
    sleep 1
done
# We confirmed that we can connect to this X server.
echo "found a good X server at DISPLAY=$display"
[ -n "$displaySave" ] && export DISPLAY="$displaySave"

# Make sure that the xfce4-session is still running. We have seen xfce4-session
# fail to be running at this point; strange but true: The check above could be
# a different session.
count=0
while ! killall -CONT xfce4-session ; do
	sleep 1
	let count=$count+1
    if [ $count = 40 ] ; then
        cat <<EOF
 Failed ($count seconds) to find xfce4-session

EOF
	exit 1
    fi
done



# TODO: We will not get an error check here until nvidia fixes
# the return status value from the nvidia-settings program
# in hy_syncToVBlank_on

Run hy_edgeBlend_on
# all 2 are nvidia driver scripts.

#This on is broken?  We'll see...
Run hy_frameLock_on

Run hy_syncToVBlank_on

echo "$0 Started Okay, so it seems."
echo "$0 finished"

