#!/bin/bash

######################################
# defaults
######################################

root=/NTFS/Shared/demos
host=cube
rhost=$(hostname)
mono=
run_stop=yes
just_server=

######################################

function usage()
{
    cat << EOF

  Usage: $0 [SERVER_HOST][-m|--mono][--no-stop][--just-server]|[-h|--help]

  Run the hyperCube demoRunner.


          OPTIONS


    -h|--help      Print this help and exit
    
    --just-server  Just run the demoRunner server

    -m|--mono      Run programs with mono visuals (not stereo)

    --no-stop      Don't run hy_stop after quiting.  hy_stop stops the
                   X session and turn off projects.

    SERVER_HOST    Run the nodejs demoRunner server on SERVER_HOST.
                   That's for testing.

EOF

    exit 1
}


function catch()
{
    if [ -n "$server" ] ; then
        echo "killing server pid $server"
        kill $server
        server=
    fi
}

function runServer()
{
    local heading="HyperCube Demos in stereo"

    env_opts=" "

    if [ -n "$mono" ] ; then
        env_opts=" INSTANTPLAYER_CAVE_OPTIONS=--mono HYPERCUBE_OPTIONS=--mono"
        heading="HyperCube Demos in mono"
    fi

    local exe=

    if [ -n "$just_server" ] ; then
        exe="exec "
    fi

    local passcode=$(openssl rand -hex 6)

    set -x
    if ! ${exe}ssh\
 $host -X${env_opts}\
 demoRunner-server $root\
 --remote $rhost\
 --title Demos\
 --exit-on-last\
 --kill-children\
 --passcode $passcode\
 --heading \"$heading\" ; then
        exit 1
    fi
    set +x
    
}


# I guess this assumes that you are using a bash shell on $host
#if ssh $host "if [ ! -d $root ] ; then exit 1 ; fi" ; then
#    root=/usr/local/src/demoRunner/testDocRoot
#fi


while [ -n "$1" ] ; do
    case "$1" in
        --no-stop)
            run_stop=
            ;;
        --just-server)
            just_server=yes
            ;;
        -m*|--m*)
            mono=--mono
            ;;
        -*)
            usage
            ;;
        *)
            host=$1
            ;;
    esac
    shift 1
done


if [ "$host" != "$rhost" ] ; then
    if ! gar_pushSshKeys $host ; then
        echo
        echo "FAILED to check ssh keys"
        echo
        exit 1
    fi
fi


if [ -n "$just_server" ] ; then
    runServer
    exit 1
fi

runServer &

server=$!


count=0
# wait for server to be working via a netcat connect.
while ! nc -z $host 8080 ; do
    sleep 0.3
    let count=$count+1
    if [ "$count" = "50" ] ; then
        echo "Failed to connect to server"
        kill $server
        exit 1
    fi
done


echo "server is running"

# We wish to have signal control of the server

trap catch SIGINT SIGTERM SIGQUIT

set -x
#firefox -no-remote http://$host:8080/ &
firefox http://$host:8080/?passcode=$passcode &
set +x

wait $server


if [ -n "$run_stop" ] ; then
    if [ "$host" != "$rhost" ] ; then
        ssh $host /usr/local/bin/hy_stop
    else
        /usr/local/bin/hy_stop
    fi
fi

