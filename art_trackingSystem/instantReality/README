This is the "new" InstantReality module engine C++ code that is used to
read the "new" ART tracker in the Virginia Tech HyperCube, or VT CAVE.


TO TEST:

Run stuff like:

make

nc -lup 5000

DISPLAY=:0.0 sax --num-aspects 4 readUDP.x3d

sax --num-aspects 4 testWand.x3d

sax --num-aspects 4 testHead.x3d

sax --num-aspects 4 testHeadWand.x3d


# because sax is a piece of shit code, Ctrl-Z and: 
killall -9 sax




Prerequisite:

Get your ART tracker writing data to your computer on a port
that you choose.  It will be a UDP/IP port.  The receiver program will
have a listening bound port.  The ART DTrack2 and/or DTrack2CLI programs
will control the ART control box that should be writing to your selected
addresses and ports as a simple unbound socket UDP/IP writer.

You also need InstantReality installed.


Disclaimer:

This code is only setup to parse a particular ART tracking data
configuration, that is one 6DOF head and one fly stick 2.  There is a more
generic ART tracking IOSensor code built into instant reality, but we
could not get it to work in two days of trying.  We know that we can read
UDP sockets with C++ code and it beats working with a fucking black box
with no reasonable documentation.  We have to write custom code for our
CAVE anyway, so what just a little more code to get is started.


Ports:

This was developed on CentOS Linux release 7.3.1611

We are expecting that an upgrade may brake InstantReality, they don't seem
to be developing it any more.  (2017 Oct 25)
The release we have installed did not come with the InstantPlayer program.
Looks like they forgot about it.  We use the program 'sax' to run the
CAVE.




To get the format of the UDP data we read the document which is not freely
available:

  http://www.ar-tracking.com/support/

  The file was named: DTrack2_User-Manual.v2.13.pdf

We had to register; enter email and password and wait for email from them
to get account.

This code will only work for a very particular ART controller
configuration.  That's all we needed.

To read art UDP data try running this netcat command (from a bash
shell):

  nc -ulp 5000


NetCat rocks.


With that you can see that the UDP data is in a simple ascii format.  This
format is explained in Appendix B of the above mentioned manual.  An
actual frame sample looks like so:

fr 24981717
6d 1 [0 1.000][-475.292 -567.632 -53.704 135.5743 5.7618 -3.3069][0.993291 0.111352 0.031199 0.057393 -0.708916 0.702954 0.100393 -0.696447 -0.710551]
6df2 1 1 [0 1.000 6 2][-48.603 -122.146 -389.220][0.175884 0.118374 -0.977268 0.887803 0.409816 0.209422 0.425290 -0.904455 -0.033013][0 0.00 0.00]


All frame as encoded in ASCII not binary


