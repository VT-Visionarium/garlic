#!/bin/bash

date="$(date)"


function Fail()
{
    [ -z "$1" ] || echo -en "$*\n\n"
    cat 1>&2 << EOF

  $0 failed

EOF

    exit 1
}

function Usage()
{
    cat 1>&2 << EOF

  Usage: $0 AllFeaturesFile InFile [OutFile [FeatureKeep1] [FeatureKeep2] ...]

  This program reads InFile and writes to OutFile.  This reads XML from
  stdin and removes all tags like <IfFeatureRemove> ... </IfFeatureRemove>
  and the tags within thoses tags which are not listed in the Feature
  optional argument list, and then after that removes any inclosing
  <IfFeatureKeep> ... </IfFeatureKeep> tags keeping the enclosed tags.

  If no OutFile is given this will generate AllFeaturesFile from InFile.

EOF

    exit 1
}


[ -z "$2" ] && Usage

featuresFile="$1"
inFile="$2"
shift 2


function Header()
{
    cat << EOF
<?xml version='1.0'?>
<!--

   This file was generated by running:

     "$1" in "$PWD"
     on: $date


   If you need to study this file try using the program 'xmllint'
   on it to add some more white space to it.
-->
EOF
}


function PostProcess()
{
    xmlstarlet c14n --without-comments - |\
        grep -Ev '^\s*$' |\
        sed -e 's/^\s*//g' -e 's/\s\s*/ /g' || exit 1
}

function RemoveTags()
{
    [ -n "$1" ] || exit 1

    local sedargs=

    while [ -n "$1" ] ; do
        sedargs="${sedargs} -e s/<[Ii][Ff]\s*$1.*>//g\
 -e s/<\/[Ii][Ff]\s*$1.*>//g"
        shift 1
    done

    [ -z "$sedargs" ] && exit 1

    sed $sedargs || exit 1
}

function CommentOutTags()
{
    [ -n "$1" ] || exit 1

    local sedargs

    # In this case we cannot compose the sed actions into one call
    # because that could make nested comments (<!-- <!-- --> -->).
    sedargs="${sedargs} -e s/<[Ii][Ff]\s*$1.*>/<!--/g -e s/<\/[Ii][Ff]\s*$1.*>/-->/g"
    shift 1
    if [ -n "$1" ] ; then
        xmlstarlet c14n --without-comments - |\
            sed $sedargs |\
            xmlstarlet c14n --without-comments - |\
            CommentOutTags $* || exit 1
    else
        xmlstarlet c14n --without-comments - |\
            sed $sedargs |\
            xmlstarlet c14n --without-comments - || exit 1
    fi
}

function GetAllFeatures()
{
    if [ -n "$1" ] && [ -f "$featuresFile" ] ; then
        ret="$(cat $featuresFile)" || exit 1
        eval "$1=\"$ret\""
        return
    fi

    tags="$(xmlstarlet c14n --without-comments $inFile |\
        egrep -Ev '^\s*$' |\
        sed -e 's/^\s*//g' |\
        egrep -E '<IF.*>' |\
        sed -e 's/[<>]//g' -e 's/^[Ii][Ff]\s*//g' |\
        sort -u)" || exit 1

    if [ -n "$1" ] ; then
        for tag in $tags ; do
            ret="$ret $tag"
        done
        eval "$1=\"$ret\""
    fi

    if [ ! -f "$featuresFile" ] ; then
        echo "$tags" > "$featuresFile" || Fail
    fi
}

# We add the features given
function AddFeatures()
{
    featuresAdd=
    all=
    featuresRemove=
    GetAllFeatures all

    if [ -n "$1" ] ; then
        eval "$1=\"$d\""
    fi

    while [ -n "$1" ] ; do
        featuresAdd="$featuresAdd $1"
        shift 1
    done
    gotit=
    for i in $all ; do
        add="$i"
        for j in $featuresAdd ; do
            if [ "$i" = "$j" ] ; then
                add=
                break
            fi
        done
        [ -n "$add" ] && featuresRemove="$featuresRemove $add"
    done

    Header "${BASH_SOURCE[1]}" > "$outFile"|| exit 1
    
    if [ -n "$featuresAdd" ] && [ -n "$featuresRemove" ] ; then
        cat "$inFile" |\
            RemoveTags $featuresAdd |\
            CommentOutTags $featuresRemove |\
            PostProcess >> "$outFile" || exit 1
    elif [ -n "$featuresAdd" ] ; then
        cat "$inFile" |\
            RemoveTags $featuresAdd |\
            PostProcess >> "$outFile" || exit 1
    else
        cat "$inFile" |\
            CommentOutTags $featuresRemove |\
            PostProcess >> "$outFile" || exit 1
    fi
}

if [ -z "$*" ] ; then
    GetAllFeatures
else
    outFile="$1"
    shift 1
    AddFeatures $*
fi

