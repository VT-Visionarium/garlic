#!/bin/bash

#########################################################
#           CONFIGURATION
#########################################################

# window size
# if we do edge blending is X root windows pixel resolution
# high res
res="2560 1600"
# low res
#res="1920 1200"

# if we do not do edge blending it is smaller in y
# by half the overlapping edge
# high res
#res="2560 1280" # 1280 = 1600 - 320
# low res
#res="1920 960" # 960 = 1200 - 240



# ypos is a constant for a given X window
# configuration.
#if we use edge blending
ypos=0

# if we do not do edge blending
# ypos is half of the overlapping pixels
# is where we place the lower projected windows
# in the y direction.
# 
# for high res 2560x1600 overlap 640
#ypos=320
# for low res 1920x1200 overlap 480
#ypos=240


# half the overlap distance of the instantreality windows
# (not root) in meters
#
# if using edge blending
yoverlap="0.381"
#
# if not using edge blending we do not overlap windows
#yoverlap=0


#########################################################


date="$(date)"

function Header()
{
    cat << EOF
<?xml version='1.0'?>
<!--

   This file was generated by running:

     "$1" in "$PWD"
     on: $date


   If you need to study this file try using the program 'xmllint'
   on it to add some more white space to it.
-->
EOF
}


function PostProcess()
{
    xmlstarlet c14n --without-comments - |\
        grep -Ev '^\s*$' |\
        sed -e 's/^\s*//g'\
            -e 's/\s\s*/ /g'\
            -e "s/@WIN_RES@/$res/g"\
            -e "s/@WIN_YPOS@/$ypos/g"\
            -e "s/@WIN_YOVERLAP@/$yoverlap/g"|| exit 1
}

function RemoveTags()
{
    [ -n "$1" ] || exit 1

    local sedargs=

    while [ -n "$1" ] ; do
        sedargs="${sedargs} -e s/<[Ii][Ff]\s*$1.*>//g\
 -e s/<\/[Ii][Ff]\s*$1.*>//g"
        shift 1
    done

    [ -z "$sedargs" ] && exit 1

    sed $sedargs || exit 1
}

function CommentOutTags()
{
    [ -n "$1" ] || exit 1

    local sedargs

    # In this case we cannot compose the sed actions into one call
    # because that could make nested coments (<!-- <!-- --> -->).
    sedargs="${sedargs} -e s/<[Ii][Ff]\s*$1.*>/<!--/g -e s/<\/[Ii][Ff]\s*$1.*>/-->/g"
    shift 1
    if [ -n "$1" ] ; then
        xmlstarlet c14n --without-comments - |\
            sed $sedargs |\
            xmlstarlet c14n --without-comments - |\
            CommentOutTags $* || exit 1
    else
        xmlstarlet c14n --without-comments - |\
            sed $sedargs |\
            xmlstarlet c14n --without-comments - || exit 1
    fi
}

function GetAllFeatures()
{
    local ret=
    
    if [ -n "$1" ] && [ -f engineFeaturesList.txt ] ; then
        ret="$(cat engineFeaturesList.txt)" || exit 1
        eval "$1=\"$ret\""
        return
    fi

    tags="$(xmlstarlet c14n --without-comments all_engines.x3d.txt |\
        egrep -Ev '^\s*$' |\
        sed -e 's/^\s*//g' |\
        egrep -E '<IF.*>' |\
        sed -e 's/[<>]//g' -e 's/^[Ii][Ff]\s*//g' |\
        sort -u)" || exit 1

    if [ -n "$1" ] ; then
        for tag in $tags ; do
            ret="$ret $tag"
        done
        eval "$1=\"$ret\""
    else
        echo "$tags"
    fi
}

# We add the features given in the arguments
function AddFeatures()
{
    featuresAdd=
    all=
    featuresRemove=
    GetAllFeatures all
    eval "$1=\"$d\""

    while [ -n "$1" ] ; do
        featuresAdd="$featuresAdd $1"
        shift 1
    done

    local gotit

    for i in $featuresAdd ; do
        gotit=
        for j in $all ; do
            if [ $i = $j ] ; then
                gotit=y
                break
            fi
        done
        if [ -z "$gotit" ] ; then
            echo "Failed to find feature \"$i\" in all_engines.x3d.txt"\
                1>&2
            exit 1
        fi
    done

    for i in $all ; do
        add="$i"
        for j in $featuresAdd ; do
            if [ "$i" = "$j" ] ; then
                add=
                break
            fi
        done
        [ -n "$add" ] && featuresRemove="$featuresRemove $add"
    done

    Header "${BASH_SOURCE[1]}" || exit 1

    set -o pipefail
    set -e
    
    if [ -n "$featuresAdd" ] && [ -n "$featuresRemove" ] ; then
        cat all_engines.x3d.txt |\
            RemoveTags $featuresAdd |\
            CommentOutTags $featuresRemove |\
            PostProcess || exit 1
    elif [ -n "$featuresAdd" ] ; then
        cat all_engines.x3d.txt |\
            RemoveTags $featuresAdd |\
            PostProcess || exit 1
    else
        cat all_engines.x3d.txt |\
            CommentOutTags $featuresRemove |\
            PostProcess || exit 1
    fi
}

[ "$1" = "GetAllFeatures" ] && GetAllFeatures

