#!/bin/bash



if [ -n "$default_host" ] ; then
    OPTIONS="OPTIONS

       HOST   $default_host is the default host
"
else
    OPTIONS="OPTIONS

       HOST   HOST is the remote host to setup access to
"
fi


function usage()
{
    cat << EOF || exit $?

  Usage: $0 [HOST]|[-h|--help]

    Generate ssh public/private rsa key pair (if needed) and put
    the public key on the machine at HOST, so that you may ssh to
    HOST from the current machine without a password.


        ${OPTIONS}


  References:

    This follows something like what you see at:
    
        http://www.linuxproblem.org/art_9.html

    Or google search:
    
        ssh without password

EOF

    exit 1
}

host=

while [ -n "$1" ] ; do
    case $1 in
        -h|--help|--h|-help|-?|--?)
            usage
            ;;
        *)
            host="$1"
            ;;
    esac
    shift 1
done

[ -z "$host" ] && host="$default_host"
[ -n "$host" ] || usage


function checkLocalKeys()
{
    if [ ! -f "${HOME}/.ssh/id_rsa" ] ; then
        echo
        echo "generating ssh keys ..."
        echo -e "\n\n\n\n\n\n\n\n" | ssh-keygen -t rsa || exit $?
    else
        echo
        echo "Your local ssh keys exist in ${HOME}/.ssh/id_rsa, which is fine."
    fi

    if [ ! -f "${HOME}/.ssh/id_rsa" ] ; then
        echo
        echo "failed to generate ssh keys"
        echo
        exit 1
    fi
}

function success()
{
    set +x
    echo "$0 was successful"
    exit 0
}


function checkWorksAlready()
{
    set -x
    if ssh -o 'StrictHostKeyChecking no' -o\
        'PreferredAuthentications=publickey' $1\
        echo -e "\\\\nLooks like you can ssh to $1 without password already\\\\n" ; then
        success
    fi
}
        

function rmHostFromKnown()
{
    if ! ssh-keygen -R $1 ; then
        echo "failed to remove host $1 from .ssh/known_hosts"
        echo "but that maybe because you do not know them yet"
        echo
    fi
}

function pushPublicKeyToHyHost()
{
    set -x
    cat ${HOME}/.ssh/id_rsa.pub | ssh -o 'StrictHostKeyChecking no' $1\
 'mkdir -p ${HOME}/.ssh && cat >> ${HOME}/.ssh/authorized_keys'\
 || exit $?
    set +x

}


checkLocalKeys
checkWorksAlready ${host}
rmHostFromKnown ${host}
pushPublicKeyToHyHost ${host}
success

